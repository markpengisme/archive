daemon off;
# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;
  gzip_proxied any; # Heroku router sends Via header

  server_tokens off;

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
  access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
  error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  # Must read the body in 5 seconds.
  client_body_timeout 5;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  upstream educa {
    server unix:/tmp/educa.sock;
  }
  upstream daphne {
    server unix:/tmp/daphne.sock;
  }

  server {
    listen <%= ENV["PORT"] %>;
    server_name _;
    keepalive_timeout 5;

    access_log off;
    error_log /app/logs/nginx_error.log;
    client_max_body_size 10M;

    location / {
      # Uncomment this if statement to force SSL/redirect http -> https
      if ($http_x_forwarded_proto != "https") {
        return 301 https://$host$request_uri;
      }

      include uwsgi_params;
      uwsgi_pass educa;
    }

    location /ws/ {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_redirect off;
      proxy_pass http://daphne;
    }

    location /static/ {
      alias /app/static/;
    }
    location /media/ {
      alias /app/media/;
    }
  }
}